#compute and print the proportion of intervals that cover the true beta
cover_prop=cover/10
print(cover_prop)
# set an initial count for coverage
cover=0
#Create a counter starting with 1
count=1
while(count <= 1000)
{
#generate a sample of size 50
x=rnorm(50,60,5)
eps=rnorm(50,0,1.5)
y=2+1.2*x+eps
#fit linear model
fit=lm(y~x)
#construct a confidence interval for slope. If we want a confidence interval for a specific
#slope, we add the option "variable name".
conf_slope=confint(fit,"x",level=0.95)
#Now, we verify if the interval covers the slope and if true, add 1 to our count for coverage.
#There are multiple ways conditionals statements can be evaluated in R. We will use the if
#function. If (condition) {expression} checks the condition, and if True, executes the
#expression (otherwise, skips the expression).
if(conf_slope[1] <= 1.2 & 1.2<=conf_slope[2]) cover=cover+1
#Increase counter
count=count+1
}
#compute and print the proportion of intervals that cover the true beta
cover_prop=cover/1000
print(cover_prop)
new.income <- data.frame(
income = c(10)
)
#confidence interval
predict(fit, newdata = new.income, interval = "confidence")
# According to our model, we are 95% confident that for an average education of 10, the average income ranges from xxx to xxx dollars.
predict(fit, newdata = new.income, interval = "prediction")
# According to our model, we are 95% confident that for an future education of 10, the average income will ranges from xxx to xxx dollars.
fit_car <- lm(cars$dist ~ cars$speed)
new.speeds <- data.frame(
cars$speed= c(12)
fit_car <- lm(cars$dist ~ cars$speed)
new.speeds <- data.frame(
speed = c(12)
)
#confidence interval
predict(fit_car, newdata = new.speeds, interval = "confidence")
# According to our model, we are 95% confident that for an average education of 10, the average income ranges from xxx to xxx dollars.
predict(fit_car, newdata = new.speeds, interval = "prediction")
# According to our model, we are 95% confident that for an future education of 10, the average income will ranges from xxx to xxx dollars.
fit_car <- lm(cars$dist ~ cars$speed)
new.speeds <- data.frame(
speed = c(12)
)
#confidence interval
predict(fit_car, newdata = new.speeds, interval = "confidence")
# According to our model, we are 95% confident that for an average education of 10, the average income ranges from xxx to xxx dollars.
predict(fit_car, newdata = new.speeds, interval = "prediction")
# According to our model, we are 95% confident that for an future education of 10, the average income will ranges from xxx to xxx dollars.
#fit_car <- lm(cars$dist ~ cars$speed)
#new.speeds <- data.frame(speed = c(12))
#confidence interval
#predict(fit_car, newdata = new.speeds, interval = "confidence")
# According to our model, we are 95% confident that for an average education of 10, the average income ranges from xxx to xxx dollars.
#predict(fit_car, newdata = new.speeds, interval = "prediction")
# According to our model, we are 95% confident that for an future education of 10, the average income will ranges from xxx to xxx dollars.
fit_car <- lm(cars$dist ~ cars$speed)
new.speeds <- data.frame(speed = c(12))
#confidence interval
predict(fit_car, newdata = new.speeds, interval = "confidence")
# According to our model, we are 95% confident that for an average education of 10, the average income ranges from xxx to xxx dollars.
predict(fit_car, newdata = new.speeds, interval = "prediction")
# According to our model, we are 95% confident that for an future education of 10, the average income will ranges from xxx to xxx dollars.
fit_car <- lm(cars$dist ~ cars$speed)
new.speeds <- data.frame(speed = c(12))
#confidence interval
predict(fit_car, newdata = new.cars$speed, interval = "confidence")
fit_car <- lm(cars$dist ~ cars$speed)
new.speeds <- data.frame(speed = c(12))
#confidence interval
predict(fit_car, newdata = new.car$speed, interval = "confidence")
fit_car <- lm(cars$dist ~ cars$speed)
new.speeds <- data.frame(speed = c(12))
#confidence interval
predict(fit_car, newdata = new.speed, interval = "confidence")
fit_car <- lm(cars$dist ~ cars$speed)
new.speeds <- data.frame(speed = c(12))
#confidence interval
predict(fit_car, newdata = new.speeds, interval = "confidence")
# According to our model, we are 95% confident that for an average education of 10, the average income ranges from xxx to xxx dollars.
predict(fit_car, newdata = new.speeds, interval = "prediction")
# According to our model, we are 95% confident that for an future education of 10, the average income will ranges from xxx to xxx dollars.
dist <- cars$dist
speed <- cars$speed
fit_car <- lm(dist ~ speed)
new.speeds <- data.frame(speed = mean(speed)))
dist <- cars$dist
speed <- cars$speed
fit_car <- lm(dist ~ speed)
new.speeds <- data.frame(speed = mean(speed))
#confidence interval
predict(fit_car, newdata = new.speeds, interval = "confidence")
# According to our model, we are 95% confident that for an average education of 10, the average income ranges from xxx to xxx dollars.
predict(fit_car, newdata = new.speeds, interval = "prediction")
# According to our model, we are 95% confident that for an future education of 10, the average income will ranges from xxx to xxx dollars.
new.educations <- data.frame(education = mean(education))
#confidence interval
predict(fit, newdata = new.educations, interval = "confidence")
# According to our model, we are 95% confident that for an average education of 10, the average income ranges from xxx to xxx dollars.
predict(fit, newdata = new.educations, interval = "prediction")
# According to our model, we are 95% confident that for an future education of 10, the average income will ranges from xxx to xxx dollars.
education <- Prestige$education
income <- Prestige$income
new.educations <- data.frame(education = mean(education))
#confidence interval
predict(fit, newdata = new.educations, interval = "confidence")
# According to our model, we are 95% confident that for an average education of 10, the average income ranges from xxx to xxx dollars.
predict(fit, newdata = new.educations, interval = "prediction")
# According to our model, we are 95% confident that for an future education of 10, the average income will ranges from xxx to xxx dollars.
education <- Prestige$education
income <- Prestige$income
fit <- lm(income ~ education)
new.educations <- data.frame(education = mean(education))
#confidence interval
predict(fit, newdata = new.educations, interval = "confidence")
# According to our model, we are 95% confident that for an average education of 10, the average income ranges from xxx to xxx dollars.
predict(fit, newdata = new.educations, interval = "prediction")
# According to our model, we are 95% confident that for an future education of 10, the average income will ranges from xxx to xxx dollars.
# code chunk options
library(knitr)
library(formatR)
opts_chunk$set(tidy.opts=list(width.cutoff=50),tidy=TRUE)
r <- sqrt(R2)*sign(fit$coefficients[2])
# code chunk options
library(knitr)
library(formatR)
opts_chunk$set(tidy.opts=list(width.cutoff=50),tidy=TRUE)
library(carData)
help(Prestige)
attach(Prestige)
fit <- lm(income ~ education)
summary(fit)
confint(fit, level = 0.95)
anova(fit)
summary(fit)
anova_fit <- anova(fit)
SSR <- anova_fit$`Sum Sq`[1]
SSTO <- anova_fit$`Sum Sq`[1] + anova_fit$`Sum Sq`[2]
R2 <- SSR/SSTO
print(R2)
r <- sqrt(R2)*sign(fit$coefficients[2])
print(r)
fit2 <- lm(income ~ women)
summary(fit2)
library(carData)
help(Prestige)
attach(Prestige)
fit <- lm(income ~ education)
summary(fit)
confint(fit, level = 0.95)
library(patchwork)
well_behaved_data <- tibble(data = rnorm(1000))
library(patchwork)
library(tibble)
library(tidyr)
well_behaved_data <- tibble(data = rnorm(1000))
# introduce some outliers
data_w_outliers <- tibble(data = c(rnorm(800), rep(5, 200)))
g_no_outlier <- ggplot(well_behaved_data, aes(x = data)) +
geom_histogram(fill = "#56CBF9", color = "grey", bins = 30) +
geom_vline(xintercept = mean(well_behaved_data$data)) +
ggtitle("Mean example, no outliers")
library(patchwork)
library(tibble)
library(tidyr)
library(ggplot2)
well_behaved_data <- tibble(data = rnorm(1000))
# introduce some outliers
data_w_outliers <- tibble(data = c(rnorm(800), rep(5, 200)))
g_no_outlier <- ggplot(well_behaved_data, aes(x = data)) +
geom_histogram(fill = "#56CBF9", color = "grey", bins = 30) +
geom_vline(xintercept = mean(well_behaved_data$data)) +
ggtitle("Mean example, no outliers")
g_outlier <- ggplot(data_w_outliers, aes(x = data)) +
geom_histogram(fill = "#7FBEEB", color = "grey", bins = 30) +
geom_vline(xintercept = mean(data_w_outliers$data)) +
ggtitle("Mean example, big outliers")
g_no_outlier | g_outlier
g_no_outlier <- ggplot(well_behaved_data, aes(x = data)) +
geom_histogram(fill = "#AFBED1", color = "grey", bins = 30) +
geom_vline(xintercept = median(well_behaved_data$data)) +
ggtitle("Median example")
g_outlier <- ggplot(data_w_outliers, aes(x = data)) +
geom_histogram(fill = "#7FBEEB", color = "grey", bins = 30) +
geom_vline(xintercept = median(data_w_outliers$data)) +
ggtitle("Median example, big outliers")
g_no_outlier | g_outlier
library(ggbeeswarm)
install.packages("ggbeeswarm")
# code chunk options
library(knitr)
library(formatR)
opts_chunk$set(tidy.opts=list(width.cutoff=50),tidy=TRUE)
library(carData)
help(Prestige)
attach(Prestige)
fit <- lm(income ~ education)
edu8 <- data.frame(education=8)
predict(fit, newdata=edu8, interval="confidence", level=0.95)
library(carData)
help(Prestige)
attach(Prestige)
fit <- lm(income ~ education)
edu8 <- data.frame(education=8)
predict(fit, newdata=edu8, interval="confidence", level=0.95)
edu12 <- data.frame(education=12)
predict(fit, newdata=edu12, interval="confidence", level=0.95)
library(carData)
help(Prestige)
attach(Prestige)
fit <- lm(income ~ education)
edu8 <- data.frame(education=8)
predict(fit, newdata=edu8, interval="confidence", level=0.95)
edu12 <- data.frame(education=12)
predict(fit, newdata=edu12, interval="confidence", level=0.95)
mean(education)
predict(fit, newdata=edu12, interval="prediction", level=0.95)
predict(fit, newdata=edu18, interval="prediction", level=0.95)
View(edu12)
View(fit)
edu18 <- data.frame(education=18)
predict(fit, newdata=edu18, interval="prediction", level=0.95)
edu18 <- data.frame(education=18)
predict(fit, newdata=edu18, interval="prediction", level=0.95)
range(education)
plot(education, income, main="Confidenct Intervals of E(Y|X) and the Prediction Interval of Y")
abline(fit, col="red")
newx = data.frame(education=c(seq(min(education),max(education),1)))
conf_interval = predict(fit, newdata= newx, interval="confidence", level = 0.95)
lines(newx$education, conf_interval[,2], col="blue", lty=2)
lines(newx$education, conf_interval[,3], col="blue", lty=2)
pred_interval = predict(fit, newdata= newx, interval="confidence", level = 0.95)
lines(newx$education, pred_interval[,2], col="black", lty=2)
lines(newx$education, pred_interval[,3], col="black", lty=2)
legend("topleft", legend=c("Regression line", "Confidence Bands", "Prediction Bands"), col=c("red","blue","black"))
plot(education, income, main="Confidenct Intervals of E(Y|X) and the Prediction Interval of Y")
abline(fit, col="red")
newx = data.frame(education=c(seq(min(education),max(education),1)))
conf_interval = predict(fit, newdata= newx, interval="confidence", level = 0.95)
lines(newx$education, conf_interval[,2], col="blue", lty=2)
lines(newx$education, conf_interval[,3], col="blue", lty=2)
pred_interval = predict(fit, newdata= newx, interval="confidence", level = 0.95)
lines(newx$education, pred_interval[,2], col="black", lty=2)
lines(newx$education, pred_interval[,3], col="black", lty=2)
legend("topleft", legend=c("Regression line", "Confidence Bands", "Prediction Bands"), col=c("red","blue","black"), lty = c(1,2,2), cex = 0.8)
plot(education, income, main="Confidenct Intervals of E(Y|X) and the Prediction Interval of Y")
abline(fit, col="red")
newx = data.frame(education=c(seq(min(education),max(education),1)))
conf_interval = predict(fit, newdata= newx, interval="confidence", level = 0.95)
lines(newx$education, conf_interval[,2], col="blue", lty=2)
lines(newx$education, conf_interval[,3], col="blue", lty=2)
pred_interval = predict(fit, newdata= newx, interval="prediction", level = 0.95)
lines(newx$education, pred_interval[,2], col="black", lty=2)
lines(newx$education, pred_interval[,3], col="black", lty=2)
legend("topleft", legend=c("Regression line", "Confidence Bands", "Prediction Bands"), col=c("red","blue","black"), lty = c(1,2,2), cex = 0.8)
r <- cor(income ~ education)
library(carData)
help(Prestige)
attach(Prestige)
fit <- lm(income ~ education)
edu8 <- data.frame(education=8)
predict(fit, newdata=edu8, interval="confidence", level=0.95)
edu12 <- data.frame(education=12)
predict(fit, newdata=edu12, interval="confidence", level=0.95)
mean(education)
predict(fit, newdata=edu12, interval="prediction", level=0.95)
edu18 <- data.frame(education=18)
predict(fit, newdata=edu18, interval="prediction", level=0.95)
range(education)
plot(education, income, main="Confidenct Intervals of E(Y|X) and the Prediction Interval of Y")
abline(fit, col="red")
newx = data.frame(education=c(seq(min(education),max(education),1)))
conf_interval = predict(fit, newdata= newx, interval="confidence", level = 0.95)
lines(newx$education, conf_interval[,2], col="blue", lty=2)
lines(newx$education, conf_interval[,3], col="blue", lty=2)
pred_interval = predict(fit, newdata= newx, interval="prediction", level = 0.95)
lines(newx$education, pred_interval[,2], col="black", lty=2)
lines(newx$education, pred_interval[,3], col="black", lty=2)
legend("topleft", legend=c("Regression line", "Confidence Bands", "Prediction Bands"), col=c("red","blue","black"), lty = c(1,2,2), cex = 0.8)
r <- cor(income ~ education)
r <- cor (income ~ education)
attach(Prestige)
r <- cor(income ~ education)
r <- cor(education ~ income)
r <- cor(education ~ income)
r <- cor (education ~ income)
# code chunk options
library(knitr)
library(formatR)
opts_chunk$set(tidy.opts=list(width.cutoff=50),tidy=TRUE)
library(carData)
help(Prestige)
attach(Prestige)
fit <- lm(income ~ education)
edu8 <- data.frame(education=8)
predict(fit, newdata=edu8, interval="confidence", level=0.95)
edu12 <- data.frame(education=12)
predict(fit, newdata=edu12, interval="confidence", level=0.95)
mean(education)
predict(fit, newdata=edu12, interval="prediction", level=0.95)
edu18 <- data.frame(education=18)
predict(fit, newdata=edu18, interval="prediction", level=0.95)
range(education)
plot(education, income, main="Confidenct Intervals of E(Y|X) and the Prediction Interval of Y")
abline(fit, col="red")
newx = data.frame(education=c(seq(min(education),max(education),1)))
conf_interval = predict(fit, newdata= newx, interval="confidence", level = 0.95)
lines(newx$education, conf_interval[,2], col="blue", lty=2)
lines(newx$education, conf_interval[,3], col="blue", lty=2)
pred_interval = predict(fit, newdata= newx, interval="prediction", level = 0.95)
lines(newx$education, pred_interval[,2], col="black", lty=2)
lines(newx$education, pred_interval[,3], col="black", lty=2)
legend("topleft", legend=c("Regression line", "Confidence Bands", "Prediction Bands"), col=c("red","blue","black"), lty = c(1,2,2), cex = 0.8)
r <- cor (education ~ income)
r <- cor (Prestige$education ~ Prestige$income)
r <- cor (education, income)
n <- length(education)
t <- (sqr(n-2)*r)/sqrt(1-r^2)
r <- cor (education, income)
n <- length(education)
t <- (sqrt(n-2)*r)/sqrt(1-r^2)
alpha <- 0.05
#Using t statistic
cut_off <- qt((1-alpha/2), df=n-2)
#qt(vector of quantiles, df, lower.tail = TRUE)
#compare with cut_off value
print(abs(t))
print(cut_off)
# Using p value
p_val <- 2*(1-pt(t,n-2))
#qt(vector of probabilities, df, lower.tail = TRUE)
print(p_val)
cor.test(education, income, alternative = "two.sided", method = "pearson")
#compute the F statistic using the given values
n <- 20
R2 <-0.8
F_val <- (n-2)*R2/(1-R2)
print(F_val)
cut_off <- qt((1-alpha),1,n-2) #F test should be one-sided
print(cut_off)
#compute the F statistic using the given values
n <- 20
R2 <-0.8
F_val <- (n-2)*R2/(1-R2)
print(F_val)
cut_off <- qt((1-alpha),1,n-2) #F test should be one-sided
print(cut_off)
#compute the F statistic using the given values
n <- 20
R2 <-0.8
alpha <- 0.05
F_val <- (n-2)*R2/(1-R2)
print(F_val)
cut_off2 <- qt((1-alpha),1,n-2) #F test should be one-sided
print(cut_off2)
#compute the F statistic using the given values
n <- 20
R2 <-0.8
alpha <- 0.05
F_val <- (n-2)*R2/(1-R2)
print(F_val)
cut_off2 <- qt((1-alpha),1,n-2) #F test should be one-sided
print(cut_off2)
#compute the F statistic using the given values
n <- 20
R2 <-0.8
alpha <- 0.05
F_val <- (n-2)*R2/(1-R2)
print(F_val)
cut_off2 <- qt(alpha, 1, n-2, lower.tail=FALSE) #F test should be one-sided
print(cut_off2)
#compute the F statistic using the given values
n <- 20
R2 <-0.8
alpha <- 0.05
F_val <- (n-2)*R2/(1-R2)
print(F_val)
cut_off2 <- qt(alpha, 1, n-2, lower.tail=FALSE) #F test should be one-sided
print(cut_off2)
#compute the F statistic using the given values
n <- 20
R2 <-0.8
alpha <- 0.05
F_val <- (n-2)*R2/(1-R2)
print(F_val)
cut_off2 <- qt(1-alpha, 1, n-2, lower.tail=FALSE) #F test should be one-sided
print(cut_off2)
#compute the F statistic using the given values
n <- 20
R2 <-0.8
alpha <- 0.05
F_val <- (n-2)*R2/(1-R2)
print(F_val)
cut_off2 <- qt(1-alpha, 1, n-2) #F test should be one-sided
print(cut_off2)
r<- sqrt(0.8)
n <- 20
t3 <- (sqrt(n-2)*r)/sqrt(1-r^2)
alpha <- 0.05
#Using t statistic
cut_off3 <- qt((1-alpha/2), df=n-2)
#qt(vector of quantiles, df, lower.tail = TRUE)
#compare with cut_off value
print(abs(t3))
print(cut_off3)
#compute the F statistic using the given values
n <- 20
R2 <-0.8
alpha <- 0.05
F_val <- (n-2)*R2/(1-R2)
print(F_val)
cut_off2 <- qf(1-alpha, 1, n-2) #F test should be one-sided
print(cut_off2)
shiny::runApp('Documents/BF591/bf591-assignment-7')
setwd("~/Documents/GitHub/BF591_FinalProject_RShiny")
counts_df <- read.csv("/data/GSE64810_mlhd_DESeq2_norm_counts_adjust.csv")
counts_df <- read.csv("data/GSE64810_mlhd_DESeq2_norm_counts_adjust.csv")
head(counts_df)
colnames(counts_df)[1] <- "gene"
head(counts_df)
df <- counts_df%>%
pivot_longer(cols = - gene, names_to = "sample", values_to = "counts") %>%
group_by(gene) %>%
summarise(gene_vars = var(counts), gene_nonzero = sum(counts != 0)) %>%
ungroup()
df <- counts_df %>%
pivot_longer(cols = - gene, names_to = "sample", values_to = "counts") %>%
group_by(gene) %>%
summarise(gene_vars = var(counts), gene_nonzero = sum(counts != 0)) %>%
ungroup()
library(shiny)
library(ggplot2)
library(colourpicker) # you might need to install this.
library(DT)
library(tidyverse)
library(matrixStats)
library("genefilter")
df <- counts_df %>%
pivot_longer(cols = - gene, names_to = "sample", values_to = "counts") %>%
group_by(gene) %>%
summarise(gene_vars = var(counts), gene_nonzero = sum(counts != 0)) %>%
ungroup()
df
var_cutoff <- quantile(df_summary$gene_vars, var_filter/100, na.rm = TRUE)
var_cutoff <- quantile(df$gene_vars, var_filter/100, na.rm = TRUE)
var_cutoff <- quantile(df$gene_vars,0.8, na.rm = TRUE)
var_cutoff
filtered_data <- df %>%
filter(gene_vars >= var_cutoff, gene_nonzero >= 5) %>%
select(gene)
filtered_data
runApp('~/Documents/BF591/bf591_final_ref/app_david.R')
runApp('~/Documents/BF591/bf591_final_ref/app_david.R')
runApp('counts/counts.R')
runApp('counts/counts.R')
load_counts_data <- function(filename){
counts_df <-read.csv(filename)
colnames(counts_df)[1] <- "gene"
return(counts_df)
}
setwd("~/Documents/GitHub/BF591_FinalProject_RShiny/counts")
#Source your main
source('functions.R')
setwd("~/Documents/GitHub/BF591_FinalProject_RShiny")
#Source your main
source('counts/functions.R')
counts_df <- load_counts_data("data/GSE64810_mlhd_DESeq2_norm_counts_adjust.csv")
counts_df <- load_counts_data("data/GSE64810_mlhd_DESeq2_norm_counts_adjust.csv")
setwd("~/Documents/GitHub/BF591_FinalProject_RShiny")
#Source your main
source('counts/functions.R')
setwd("~/Documents/GitHub/BF591_FinalProject_RShiny")
#Source your main
source('counts/functions.R')
#Source your main
source('counts/functions.R')
#Source your main
source('/counts/functions.R')
#Source your main
source('/counts/functions.R')
#Source your main
source('/counts/functions.R')
#Source your main
source('./counts/functions.R')
#Source your main
source('/counts/functions.R')
#Source your main
source('counts/functions.R')
#Source your main
source("functions.R")
counts_df <- load_counts_data("data/GSE64810_mlhd_DESeq2_norm_counts_adjust.csv")
counts_df <- load_counts_data("~/Documents/GitHub/BF591_FinalProject_RShiny/data/GSE64810_mlhd_DESeq2_norm_counts_adjust.csv")
#Display the top 10 rows of verse counts
head(counts_df,10)
#Source your main
source("functions.R")
counts_df <- load_counts_data("~/Documents/GitHub/BF591_FinalProject_RShiny/data/GSE64810_mlhd_DESeq2_norm_counts_adjust.csv")
head(counts_df,10)
filtered_df <- filter_data(counts_df)
filtered_df <- filter_data(counts_df,0.6,5)
head(filtered_df)
runApp('counts/counts.R')
runApp('counts/counts.R')
